var debug = require('debug')('dutchnsettle-api:server');
var http = require('http');
const { getSecret } = require('../services/secretManager');


getSecret().then(secretData => {
  Object.keys(secretData).forEach(key => {
    process.env[key] = secretData[key];
  });

  var app = require('../app');
  const { appConfig } = require('../config/appconfig');
  var port = normalizePort(appConfig.app.port);
  app.set('port', port);

  var server = http.createServer(app);

  server.listen(port);
  server.on('error', (error) => { onError(error, port) });
  server.on('listening', () => { onListening(server) });
});

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error, port) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening(server) {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
